# HOST 端
import socket
#AF_INET IPV4 protocols SOCK_STREAM: orient flow
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
#establish connect:
#s.connect(self,address) = s.connect((tuple))

s.connect(('www.baidu.com',80))

#s.send(self,data,flags)
s.send('GET / HTTP/1.1\r\nHost: www.baidu.com\r\nConnection: close\r\n\r\n')

#receive data:
buffer = []
while True:
    d = s.recv(1024)
    if d:
        buffer.append(d)
    else:
        break
data = ''.join(buffer)

s.close()

header,html = data.split('\r\n\r\n',1)
print header
with open('baidu.html','wb') as f:
    f.write(html)

# Server端
import socket
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

s.bind(('127.0.0.1',9999))

s.listen(5)
print 'Waiting for connection...'

while True:
    #received a new connection:
    sock,addr = s.accept()
    t = threading.Thread(target = tcplink,args=(sock,addr))
    t.start()

def tcplink(sock,addr):
    print 'Accept new connection from %s:%s...'%addr
    sock.send('Welcome!')
    while True:
        data = sock.recv(1024)
        time.sleep(1)
        if data == 'exit' or not data:
            break
        sock.send('Hello,%s' % data)
    sock.close()
    print 'connection from %s:%s closed' % addr

# Test Server 端
import socket
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('127.0.0.1',9999))
print s.recv(1024)
for data in ['Michael','Tracy','Sarah']:
    s.send(data)
    print s.recv(1024)

s.send('exit')
s.close
