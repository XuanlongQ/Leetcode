class Graph(object):
	def __init__ (self,*args,**kwargs):
		self.node_neighbour = {}
		self.visited = {}

	def add_nodes(self,nodelist):
		for node in nodelist:
			self.add_node(node)

	def add_node(self,node):
		if node not in self.nodes():
			self.node_neighbour[node] = []

	def add_edge(self,edge):
		u,v = edge
		if (v not in self.node_neighbour[u]) and (u not in self.node_neighbour[v]):
			self.node_neighbour[u].append(v)
			if (u !=v):
				self.node_neighbour[v].append(u)
	def nodes(self):
		return self.node_neighbour.keys()


	def depth_first_search(self,root = None):
		order = []
		def dfs(node):
			self.visited[node] = True
			order.append(node)
			for n in self.node_neighbour[node]:
				if n not in visited:
					dfs(n)

		if root:
			dfs(root)
		for node in self.nodes():
			if node not in visited:
				dfs(node)
		print order
		return order

	def breadth_first_search(self,root =None):
		order = []
		queue = []
		def bfs():
			while len(queue) > 0:
				node = queue.pop(0)
				self.visited[node] = True
				for n in self.node_neighbour[node]:
					if (n not in self.visited) and (n not in queue):
						queue.append(n)
						order.append(n)
	if root:
		queue.append(root)
		order.append(root)
		bfs()
		for node not in self.visited:
			queue.append(node)
			queue.append(node)
			bfs()
		print order
		return order

if __name__ =='__main__':
	g = Graph()
	g.add_nodes([i+1 for i in range(8)])
	g.add_edge((1, 2))
	g.add_edge((1, 3))
	g.add_edge((2, 4))
	g.add_edge((2, 5))
	g.add_edge((4, 8))
	g.add_edge((5, 8))
	g.add_edge((3, 6))
	g.add_edge((3, 7))
	g.add_edge((6, 7))
	print "nodes:", g.nodes()
	order = g.breadth_first_search(1)
	order = g.depth_first_search(1)

